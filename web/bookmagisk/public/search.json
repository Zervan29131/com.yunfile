[{"title":"propreate使用教程","url":"/2022/01/24/propreate使用教程/","content":"\n## 主界面\n\n1. 在主界面双指按住画布可以旋转画布，双指同时放大画布预览，双指同时缩小退出预览。\n\n2. 录制作画过程：新建画布→慢镜头设置，可设置录制清晰度\n\n## 手势\n\n1. 单指长按：吸管工具。双指放大缩小画布，双指快速捏合回到原始大小。\n\n2. 双指点击：撤销。三指点击：重做。\n\n3. 三指滑动：出现“拷贝，剪切，粘贴”等选项。\n\n4. 四指点击：画布全屏。\n\n## 画笔\n\n1. 画笔库向下拉，最上面出现“＋”，点击新建画笔组合，笔刷向右滑动可多选，用左手拖动复制笔刷到新建组合。\n\n2. 最左侧滑块调节笔刷粗细和不透明度，滑块中间按钮是吸管工具。\n\n3. 笔刷加粗：先左滑复制笔刷，点击笔刷→属性→画笔行为→最大尺寸数值调大→完成。\n\n4. 防误触：左上角操作（扳手图标）→偏好设置→手势控制→常规→禁用触摸操作。\n\n5. 防止抖动：点击笔刷→描边路径→流线，数值大越大越顺滑。注：工作室笔建议调到64\n6. 如果需要粗细一致的线条，可以选择单线，他是一个没有笔锋的线条\n\n## 图层\n\n1. 背景图层里可修改背景颜色。\n\n2. 正常模式是上面的图层覆盖下面的。其他模式如“正片叠底”等与PS类似。\n\n3. 可多建几个图层画不同部分，方便修改。\n\n4. 导出图片时要勾选所有图层。\n\n5. 修改图层不透明度可以让图层变淡。\n\n6. 画阴影可以用同一个颜色正片叠底。\n\n7. 图层右滑可以选中多个创建图层组。\n\n8. 长按某个图层旁边的对号，可以只显示该图层。\n\n9. Alpha锁定：给画过的区域上色，不影响其他空白区域，缺点是只能在同一个图层操作。\n10. 剪辑蒙版：可以复制图层，在新图层操作，效果一样且不影响原图层。\n\n## 选取（左上角第三个）\n\n1. 自动：与PS魔棒工具类似，按住画面某个部分向右拖动，可以扩大选择范围。\n\n2. 手绘：可以用笔框出选择区域（只能选择当前图层内容）。\n\n3. 选取后点击左上角第四个图标（变形）可以将选择区进行自由变换，等比例拉伸，扭曲等。\n4. 手指按住左上角第四个图标，可以直接放大缩小你选中的图层\n\n## 颜色（右上角圆形图标）\n\n1. 双击两下，自动选取纯色。\n2. 填充：封闭的线条可以直接将颜色图标拖到其中，即用当前颜色填充。\n3. 填充白边：可以按住笔向右拖动，屏幕顶端出现“色彩快填阈值”，往右滑动增加阈值会填满。\n4. 涂抹（右上角手指图标）：用来混色，可以画腮红等。可以将混合后的颜色用吸管吸取然后加入色盘中。\n\n## 画形状：\n\n1. 圆：画一个椭圆在结尾按住笔不动就会变成标准椭圆。此时继续按住笔，左手一个手指点击屏幕则变正圆（或选择屏幕上方编辑形状）。矩形，三角形，直线同理。\n\n2. 直线：操作（扳手图标）→画布→绘图指引打开，再选择 图层→绘图辅助，两个都打开即可画直线。绘图指引中可调节网格线尺寸不透明度等，还可画对称、水平、四象限等。","tags":["ToRead"]},{"title":"视频脚本制作模板","url":"/2022/01/24/视频脚本制作模板/","content":"\n你是否觉得，看短视频比看电视还过瘾？劲爆的画面、巧妙的神转折、不拖沓的剧情、嗨爆的BGM...都足以让人“忘却人间”。\n\n而这一系列设计的背后，都承载于一个重要部分：短视频脚本。\n\n就像拍电视剧、电影一样，短视频脚本是整个剧情的大纲，决定剧情的发展与走向。\n\n短视频脚本写的好不好，决定了你的内容是否优质，是否有机会上热门。\n\n对于视频创作者，我一直都在强调一个问题，那就是不能满足于视频拼接，而要更进一步，以脚本思维看待一个视频。\n\n那么问题就来了——\n\n- 视频脚本到底要怎么写？\n- 怎么样才是一个好的视频脚本？\n\n然而很多人连脚本长啥样都不知道，更别说怎么写了！下面，来就行给大家详细讲解脚本作用是什么、构成要素有哪些、该怎么写。\n\n本文就用最简单的方法，帮助大家制作一个视频脚本！\n\n# 一、主题思路\n\n## 脚本作用有哪些？\n\n脚本，作为短视频拍摄的重要依据，所有参与短视频拍摄工作人员的行为、动作都要根据脚本来开展。\n\n并且脚本在短视频开拍前，就确定了拍摄设备、道服化、环境、角色、场景、旁白等元素。\n\n因此，脚本可以提前统筹安排好每一个人每一步要做的事情，提高大家的工作效率，并保证视频的高质量完成。\n\n## 视频如何选题？\n\n在正式着手开始做视频之前，可能很多朋友都会比较纠结如何选题，其实很简单，只要问自己几个问题就好了。\n\n- 我这个视频是什么类型的？\n- 是实拍的还是剪辑的？\n- 是情景故事还是vlog记录？是测评还是探店？是解说还是创意混剪？\n- 视频面向的是哪些观众？\n- 视频主要表达什么主题？带给观众什么？是知识收获，还是娱乐消遣？\n- ……\n\n如果实在有选择困难症的朋友，可以参考一下自己平常喜欢刷的视频类型，从中选择自己擅长的、制作起来更容易上手的主题。\n\n## 脚本的构成元素\n\n在脚本里面，我们要对每一个镜头进行细致的设计，用镜头讲故事，用简单的语言把故事展现给粉丝。\n\n下面是一个比较全面的脚本模板，大家可以看到脚本的主要构成要素主要有以下几点：\n\n![短视频脚本怎么写？学会这3个套路，新手也能做爆款](https://www.zmtzxw.com/wp-content/uploads/2020/12/20201218144958_31992.png)\n\n### 1、镜头景别\n\n拍摄的时候为了让画面情感表达更到位，会用远景、全景、中景、近景、特写来表现，这些拍摄方法的作用也各有不同：\n\n远景：是把整个人和环境拍摄在画面里面，常用来展示事件发生的时间、环境、规模和气氛。\n\n全景：比远景更近一点，把人物的身体整个展示在画面里面，用来表现人物的全身动作，或者是人物之间的关系。\n\n中景：指拍摄人物的膝盖至头顶的部分，不仅能够使观众能够看清人物的表情，而且有利于显示人物的形体动作。\n\n近景：指拍摄人物胸部以上至头部的部位，有利于表现人物的面部或者是其他部门的表情、神态。\n\n特写：就是对人物的五官或者身体某部位的细节进行拍摄，适合用来表现需要突出的细节。\n\n![短视频脚本怎么写？学会这3个套路，新手也能做爆款](https://www.zmtzxw.com/wp-content/uploads/2020/12/20201218144959_53978.jpg)\n\n### 2、拍摄方法\n\n镜头的拍摄方式包括推、拉、摇、移、跟等多种形式，每一种拍摄手法所呈现出的效果不同。\n\n明确拍摄方法，可以减少与负责拍摄工作人员的沟通时间，保证每一个画面的需要表现的效果。\n\n### 3、画面内容\n\n一个成功的脚本，视频至少成功了一半。这里面绝对少不了内容的功劳。\n\n别看几十秒短短的视频，也许这背后是企业整个编辑团队的功劳。\n\n因此视频中出现的人物、画面、动作、情绪，都需要通过精简具体的语言描述出来。\n\n### 4、视频时长\n\n正所谓“短视频”，所以尤其需要注意时间的把控。甚至有些团队，会在具体某几秒吸引用户、剧情转折、引导点赞等。大部分人会把视频控制在15s-30s。\n\n### 5、道具、特效和背景音乐\n\n除了人物出境，视频里面也需要准备好道具，以便视频拍摄可以顺利开展。\n\n另外，短视频要做好，也少不了特效和背景音乐的渲染。少了这部分元素，内容做的再好，也会显得乏味。\n\n# 二、脚本制作\n\n### 1、框架搭建、拟大纲\n\n一个脚本先期从哪些方面考虑问题，比如：拍摄主题、故事线索、人物关系、场景选在哪里拍摄等。\n\n### 2、明确主题\n\n在构思内容之前，需要找到中心点，即你想表达的内容主题是什么，比如：绿茶鉴定、智斗闺蜜、奇葩室友...\n\n确定好中心主题，就可以围绕这个点开始头脑风暴写出大纲，如果能写成有转折、有冲突、有故事的剧情，更能激发粉丝的播放、评论、点赞。\n\n比如“老爸评测”账号，主题都是以检测产品为主，帮助粉丝揪出过各种“假毒劣”问题。\n\n### 3、场景设计\n\n和电视剧一样，有质感的场景设计，更能获得粉丝的信任和点赞。并且，高质量特效的制作成本也很高，无特殊的场景要求，选取真实符合的场景即可。\n\n当然，场景必须与脚本剧情表现相契合，比如学生上课是在教室里、办公室剧情就在公司办公室，要让观看者有代入感、真实感，有观看的欲望，而不是分分钟让人出戏。\n\n### 4、时间把控\n\n这里所讲的时间把控，并不是让你去纠结视频一定要卡到多少秒，而是如何在时间节点上设置转折、反转，以此留住用户。\n\n比如说，用10s吸引用户、10s制造反转、20s吸引用户关注。\n\n### 5、背景音乐、配音\n\nBGM是一个短视频拍摄必要的构成部分，配合场景选择合适的音乐非常关键。\n\n而配音可以用抖音、快手自带工具来做，操作起来也很简单。\n\n# 三、大纲设计\n\n常见的脚本有三种类型：提纲式、剧本式、分镜表格式。\n\n- **提纲式：**比较类似于工作计划，主要盘点罗列出视频需要展示的内容，并且标注相应的工作事项和细节。\n\n- **剧本式：**文档式的脚本，以剧本的方式进行展现，主要内容为人物动作 、人物对话，并且标注相应的时间、场景等细节。可以作为拍摄情景故事的具体指导。\n\n- **分镜表格式：**比较灵活的脚本类型，适用范围广，这里我也做了一个简单的样式作为参考。把不同的画面需要展示的内容，按照剧情发展依次排列好，并且注明每个画面的细节。\n\n灵活的地方在于，我们可以根据自己视频的需要，自由增减其中的项目，必要的时候还可以用简单画出每一个画面的草图。\n\n![img](https://pic4.zhimg.com/80/v2-0f94181257791dfe0f9dd9022e9872cf_720w.jpg)\n\n\n\n有些朋友可能对脚本没什么思路，所以我们一开始，可以先写一个大纲，然后通过大纲来扩充细节，进而写成完整的剧本。这里建议可以使用一些电子版的思维导图工具来制作大纲。\n\n- 思维导图的优势就在于，**扩散性的结构，可以很方便地发散思维**，对撰写脚本很有帮助。\n\n如果不熟悉思维导图的朋友，也可以搜索主题相关的思维导图模板，通过套用模板来撰写大纲。\n\n打个比方，我们要做一个网红美食店的探店视频，先把主题写上去，标题不用急，可以等视频完成后再来思考。\n\n![img](https://pic4.zhimg.com/80/v2-7be7477e4fea5170e4991e9ae745fa2f_720w.jpg)\n\n然后开始了，发散思维，**一个探店视频该如何开头？**\n\n如果还没想好，可以把自己的想法都保留着，毕竟探店视频的开头，是可以有一定的割裂的，所以我们可以有了更完善的想法，再来挑选一个合适的开头。\n\n![img](https://pic2.zhimg.com/80/v2-f1681ed3165ce7dec1d700292489d2e1_720w.jpg)\n\n视频中间就应该是**主体部分的内容**了。像环境、美食、价格这种问题，是观众会比较关心的，需要重点突出。\n\n至于其他各个方面，可以视情况而定，如果探店过程中有什么有趣的小故事，遇到什么有意思的人，也可以添加到视频里。\n\n![img](https://pic4.zhimg.com/80/v2-d916c8156e9222f821bdc80962ac6fb7_720w.jpg)\n\n\n\n**视频结尾**可以用评价、下期预告等来做结尾，如果有什么合适的段子，可以用出来，增加亮点。\n\n这种视频比较类似于测评，所以一些重点的细节，是需要体现出你的看法和评价，为观众提供参考的价值。\n\n当然，在加入干货的同时，不要忘记提取亮点，增加一些趣味性的内容，提高视频可看性。\n\n# 四、故事创作\n\n有些朋友可能会说，只是制作一个vlog记录视频，还需要什么故事吗？\n\n> 我的答案当然是，需要。\n\n这个故事可以从两个方面出发，一个是预先准备，在拍摄之前，已经想好有些比较有看头的事情，自己一定要去完成，然后在拍摄过程中，主动地去触发故事。\n\n另一个，就是在拍摄中遇到有趣的事情，适时地记录下来，通过后期编辑，让观看的效果更具故事性。关于这方面，学习剪辑的朋友，可以重点学一下影视领域常用的蒙太奇手法，在讲故事方面非常好用。\n\n## **1.引发共鸣**\n\n所谓的引发共鸣，其实就是戳中你的痛点。\n\n比如说，拍摄一个办公室有关的情景故事，我在其中添加了一些被上司欺压、同事推卸责任之类的情节，这是职场常见的事情，很多观众感同身受，就会产生共鸣。\n\n## **2.人物设定**\n\n```text\n共鸣的最重要的点，就在于人。\n```\n\n人跟人之间是很容易产生代入感的，当他们有了相似的经历，或者有人是自己向往的类型，尤其如此。\n\n所以一个好的人物设定是非常重要的，它可以提高你的视频质量，也可以留下你的观众，把他们变为粉丝。\n\n> 哪怕是对于vlog记录类的视频，人物设定依然很重要。\n\n比如说你是一个测评的视频博主，那么你就得对相关领域有充分的认识，这就是你的人物设定，你必须往这个方向去定位自己，这样你测评时说的话才有说服力，你的视频才会有观众。\n\n## **3.设置冲突**\n\n冲突是比较有话题性的，也是很有吸引力的。\n\n```text\n举个大家比较熟悉的例子：三打白骨精。\n```\n\n唐僧误以为孙悟空打死了凡人的一家三口，想要把悟空赶走。这就是一个典型的冲突。\n\n站在观众的角度，我们知道悟空是被误解了，所以我们迫不及待地想看到后续的发展，想要看到真相大白的那一刻。\n\n这就是冲突的吸引力，好的故事需要制造出引人入胜的冲突。\n\n## **4.故事节奏**\n\n故事的情节是有高潮有低潮，也有平淡的，讲究一个起承转合，通过一定的节奏设定，来调动观众的情绪，触动他们的内心。\n\n比如我们写作文时常用的开端、发展、高潮、结局，就是一个典型的节奏起伏，当然有的故事可能会有小高潮、大高潮的多次起伏，具体要看我们故事的设置。\n\n很多vlog视频，由于没有具体的故事线，总是拍多少算多少，后期剪辑也做的不多，故事节奏太平淡、太拖沓，这种视频是很难吸引人的。\n\n> 现在，视频创作都是以短视频为主，很多观众没有耐心看下去一个节奏平淡拖沓的视频，可能看十几秒就退出了。\n\n# 五、素材收集与管理\n\n## **1.拍摄准备**\n\nvlog、情景故事等，都是需要拍摄的，这些拍摄细节，都是可以提前想好、记录在脚本里做参考的。\n\n- 拍摄场景选择，场地、布景、道具等内容如何准备？\n- 拍摄时间，需不需要黄昏、夜景等？\n- 拍摄镜头，远景还是近景？哪里需要特写？拍摄什么需要推拉镜头？\n- ……\n\n## **2.素材网站**\n\n很多时候我们无法拍摄所有的素材，所以往往需要一些外部素材的填充。\n\n比如B站，就有很多影视素材、绿幕免抠图素材可用，其中不乏许多经典的影视名场面、搞笑视频片段，穿插到视频中，可以提高趣味性、可看性，效果非常不错。\n\n## **3.素材管理**\n\n想要完成一个视频，往往需要整理很多的素材，这里我就分享2个管理素材的技巧。\n\n- **脚本记录法：**对素材进行一次盘点，并且把合适的素材填入分镜头脚本的对应位置。可以标注视频素材的序号，以及记录素材可用片段的时间节点，这样后期查找起来会很方便。\n\n- **文件命名法：**把不同的素材类型，按照视频主题、素材类型（图片、视频、音频等）、动作情绪场景等汇总，用多层文件夹进行分类整理，同时对于文件进行命名，方便定位。对于视频素材的命名，也可以盘点视频的可用片段，并且把时间节点直接记录在名称里。\n\n> 当脚本的准备已经就绪，剩下的就是按部就班地完成视频了，当你有了一个好的脚本，你才会明白，创作视频已经变得如此简单。\n\n\n\n\n\n#### 注：以上文章整理自网络，如涉及版权请联系删除，谢谢。","tags":["ToRead"]},{"title":"为将git连接到服务器所需要做的事","url":"/2022/01/19/为将git连接到服务器所需要做的事/","content":"\n- 在服务器上搭建Git环境，创建Git仓库\n- 在主机生成Hexo静态文件，通过与服务器连接，推到服务器上的Git仓库\n- 通过git-hooks实现自动部署到网站资源目录\n- Nginx做静态文件服务器，实现外界对网站资源目录的访问\n\n## 创建一个Git用户\n\n创建一个git用户，并在home目录下建立一个`.ssh`目录，赋予其700权限。\n\n```bash\nsudo adduser -m git\nsu git\nmkdir ~/.ssh && chmod 700 ~/.ssh\ntouch ~/.ssh/authorized_keys && chmod 600 ~/.ssh/authorized_keys\n```\n\n`.ssh`目录和`authorized_keys`文件权限如下\n\n[图片]略\n\n然后只需要将ssh连接的公钥复制到`authorized_keys`文件中就可以通过ssh 连接git用户了\n\n## 限制git用户的shell\n\n上面创建的git用户可以通过ssh连接，进行任何操作。为了安全性，我们需要将git用户的活动限制在与Git相关的范围，也就是把git用户的shell改成 `git-shell`\n\n```bash\nsudo chsh git -s $(which git-shell)\n```\n\n当然通过修改`/etc/profile`也可以达成这一目的。\n\n## 创建blog 对应的git仓库\n\n在 `/var/repo`下，创建一个空的`blog.git`仓库，请灵活替换。\n\n```bash\nmkdir /var/repo\ncd /var/repo\ngit init --bare blog.git\n```\n\n## 配置git-hooks\n\n也就是配置git推送后执行的脚本\n\n```bash\nvim /var/repo/blog.git/hooks/post-receive\n```\n\n添加\n\n```text\n#!/bin/bash\ngit --work-tree=/var/www/hexo --git-dir=/var/repo/blog.git checkout -f\n```\n\n意思是从`blog.git`仓库覆盖掉`/var/hexo`目录，达到更新的目的。为其添加执行权限\n\n```bash\nchmod +x /var/repo/blog.git/hooks/post-receive\n```\n\n改变blog.git目录的拥有者\n\n```bash\nchown -R git:git blog.git\n```\n\n## 创建静态文件目录，并赋予权限\n\n```bash\nmkdir /var/www/hexo\nchown -R git:git /var/www/hexo\nchmod -R 755 /var/www/hexo\n```\n\n## 测试\n\n配置完git后，可以通过`git clone git@<ip地址或域名>:/var/repo/blog.git`来测试git ssh\n\n## 配置hexo\n\n打开hexo blog的目录，修改`_config.yml`文件，然后就可以使用`npx hexo clean && npx hexo g -d`进行生成部署了\n\n```text\ndeploy:\n  type: git\n  repository : git@<ip地址或与域名>:/var/repo/blog.git\n  branch: master\n```\n\n## nginx配置http强制跳转https\n\n> 很多网站虽然支持 https, 但是直接在浏览器地址栏输入网址后, 默认仍是以 http 协议去访问的, http 强制跳转 https 的需求应运而生, \n\n### rewrite 方法\n\n这是最常用的实现方法, 将所有 http 请求通过 rewrite 重定向到 https 即可\n\n进入nginx.conf文件下\n\n```bash\nvim /usr/local/nginx/nginx.conf\n或\nvim /etc/nginx/sites-available/default\n```\n\n打开之后文件，可以将没用的东西都删除掉，删除的时候注意，括号要对应起来。\n\n然后进行配置，输入：\n\n```bash\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n  server {\n  #监听443端口\n    listen 443 ssl;\n    #index index.html index.htm;\n    #access_log  /var/log/nginx/docs.log  main;\n    #你的域名\n    server_name zervan.cn; \n    ssl on;\n    #ssl证书的pem文件路径\n    ssl_certificate   /etc/nginx/cert/7105204_zervan.cn.pem;\n    #ssl证书的key文件路径\n    ssl_certificate_key /etc/nginx/cert/7105204_zervan.cn.key;\n    location / {\n      root /var/www/hexo;\n     #proxy_pass  http://公网地址:项目端口号;\n    }\n}\n\nserver {\n    listen 80;\n    server_name zervan.cn;\n    #将请求转成https\n    rewrite ^(.*)$ https://$host$1 permanent;\n     # return 302 https://$host$request_uri;\n}\n}\n\n###\n server {\n\n    listen 443 ssl;\n\n    server_name zervan.cn; \n\n    ssl_certificate   /etc/nginx/cert/7105204_zervan.cn.pem;\n\n    ssl_certificate_key /etc/nginx/7105204_zervan.cn.key;\n    location / {\n      root /var/www/hexo;\n\n    }\n}\nserver {\n        listen 80 default_server;\n        listen [::]:80 default_server;\n        root /var/www/hexo;\n\n        server_name _;\n        location / {\n                try_files $uri $uri/ =404;\n        }\n}\n```\n\n> 注意：这里需要在安全组中开放443端口。\n\n配置完成，重启nginx服务。\n\n\n\n## 附：nginx常用命令\n\n### 停止开机自启动\n\nsystemctl disable nginx.service\n\n### 设置nginx服务开机自启动\n\nsystemctl enable nginx.service\n\n### 启动nginx 服务\n\nsystemctl start nginx.service\n\n### 停止nginx服务\n\nsystemctl stop nginx.service\n\n### 重启nginx服务\n\nsystemctl restart nginx.service\n\n### 重新读取nginx配置\n\n(这个最常用, 不用停止nginx服务就能使修改的配置生效)\nsystemctl reload nginx.service\n\n### 查看服务当前状态\n\nsystemctl status nginx.service\n\n### 查看所有已启动的服务\n\nsystemctl list-units --type=service\n\n\n\n","tags":["code"]},{"title":"面向对象编程","url":"/2022/01/16/面向对象编程/","content":"# 面向对象编程\n\n面向对象编程(Object Oriented Programming)是目前非常重要的一种编程方式， 当前主流的强类型语言如C#和Java都提供了面向对象的语法特征。相对于面向过程来说，面向对象有封装、继承和多态性等特性，因此面向对象编程可以设计出高内聚、低耦合的系统，从而使系统更加灵活、更加易于维护。\n\n面对软件规模的日趋扩大、架构的日趋复杂和需求变化的日趋加快，将计算机解决问题的基本方法统一到人类解决问题的习惯方法之上，这是提出面向对象的首要原因。\n\n可重用性代表着软件产品的可复用能力，是衡量一个软件产品成功与否的重要标志。当今的软件开发行业，人们越来越追求开发更通用的可重用构件，从而使软件开发过程彻底改善，即从过去的语句级编码发展到现在的构件组装，最终实现提高软件开发的效率，降低软件维护成本的目的。\n\n面向对象编程的本质是以建立模型来抽象表达现实事物。模型是用来反映现实世界中事物特征的一种抽象载体。一般情况 下，任何一个模型都不可能完全反映客观事物的一切具体特征，但是可以根据需求抓住待解决问题的主要矛盾，即主要的特征和行为。合理的建模既可以对现实事物中的主要特征和行为进行描述，又可以简化问题。\n\n面向对象是把待解决问题分解成各个对象，而建立对象的目的不是为了完成某一个步骤，而是为了描述某个事物在整个解决问题的步骤中的特征和行为。面向对象足以功能来划分问题，而不是步骤。\n\n曾经在网上看到过一篇文章， 用一个比较具象的例子来说明面向对象和面向过程的不同，面向对象写出来的程序相当于盖饭，而面向过程写出来的程序相当于炒饭。用面向对象的思想来分析盖饭，那么可以抽象出来盖饭主要是由白米饭和菜(盖在米饭上)构成的，因此可以将盖饭分解成白米饭和菜。\n\n盖饭有很多种，其中主要的区别就是通过菜来决定的。如果盖在饭上的是青椒肉丝，那么就是青椒肉丝盖饭:如果盖在饭上的是番茄鸡蛋，那么就是番茄鸡蛋盖饭。由此可以看出，我们为了提高服务的速度和后续可扩展性，可以将米饭的制作通过电饭煲完成，然后将番茄鸡蛋和青椒肉丝分别做好，这样就可以通过不同的组合来生成不同的盖饭了。此时如果有新客户说要份鱼香肉丝盖饭， 那么我们只需要单独炒一份鱼香肉丝即可，饭不用重新做，从而提高了扩展性。面向对象就是高内聚、低耦合，相当于一种积木的方式，可以组合成不同的系统。\n\n如果是炒饭，炒饭的精髓在于入味和融合。炒饭是将饭和菜(例如鸡蛋)充分进行翻炒，达到饭中有菜、菜中有饭的境界。炒饭虽然好吃，但是饭和菜一旦混合， 二者分离起来非常难，如果客户说我要青椒肉丝炒饭，那么之前的蛋炒饭就无法利用了，只能重新将饭和菜准备好，之前的饭无法重用。\n\n盖饭的好处就是将菜和饭分离，从而提高了制作盖饭的灵活性。饭不满意就换饭，菜不满意就换菜。从软件工程领域来说，盖饭就是可维护性和扩展性比较好，饭和菜的耦合度比较低。炒饭将菜和饭搅和在一起， 想换炒饭中的菜和饭都很困难，饭和菜的耦合度很高，以至于可维护性比较差。软件工程追求的目标之一就是可维护性。 可维护性主要表现在3个方面:可理解性、可测试性和可修改性。面向对象的好处之一就是 显著地改善了软件系统的可维护性。当前主面向对象是种对现实世界理解和抽象的方法，是计算机编程技术发展到一定阶段后的产物。抽象、封装、继承和多态是面向对象的基础，是面向对象的四大基础特性。\n\n## 四大基本特性:\n\n### 抽象\n\n提取现实世界中某事物的关键特性，为该事物构建模型的过程。对同一事物在 不同的需求下，需要提取的特性可能不一 样。得到的抽象模型中一 般包含属性(数据)和操作(行为)。这个抽象模型称为类。对类进行实例化可得到对象。\n\n### 封装\n\n封装可以使类具有独立性和隔离性，保证类的高内聚。只暴露给类外部或者子类必需的属性和操作。类封装的实现依赖类的修饰符（public 、 protected 和 private 等）。\n\n### 继承\n\n对现有类的一种复用机制。一个类如果继承现有的类，那么这个类将拥有被继承类的所有私有特性（属性和操作）。这里指的继承包含类的继承和接口的实现。子类可以对父类的行和属性进行扩展和覆盖。\n\n### 多态\n\n多态是在继承的基础上实现的。多态有3个要素：继承、重写和父类引用指向子类对象。类引用指向不同的子类对象时，调用相同的方法，呈现出不同的行为，这就是类的多态特性。态可以分成编译时多态和运行时多态。在面向对象四大基础特性之上，我们在做面向对象\n\n## 基本的设计原则：\n\n### 开放封闭原则\n\n一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。当软件需求变化时，尽量通过扩展软件实体的行为来实现变化，而不是通过修改已有的代码来实现变化。\n\n这项原则应该是所有面向对象编程的核心。\n\n当然，不要妄想对修改完全封闭，这是不可能的，就像组件之间零依赖是不可能的一样。\n\n### 单一职责原则\n\n不要存在多于一个导致类变更的原因。通俗地说，就是一个类只负责一项职责。如果一个拥有多于一项的职责，就是比较脆弱的设计，那么这些职责就会耦合到一起，也就会有多个原因来导致这个类的变化。对某一职责的更改可能会损害类满足其他耦合职责的能力。这样职责的耦合会导致设计的脆弱，以至于当职责发生更改时产生无法预期的破坏。\n\n做且只做好一件事，这条原则其实不仅仅适用于对象，也同样适用于函数、变量等元素。\n\n### 里氏替换原则\n\n所有引用基类的地方必须能透明地使用其子类的对象，只有当派生类可以替换掉基类，且软件的功能不受影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。\n\n当一个基类出现了其子类不想要的接口成员时，继承关系必然是欠缺考虑的继承。这个时候要么想办法把基类的那个对象抽象出去，要么子类再选择从合适的基类继承。\n\n### 接口分离原则\n\n客户端不应该依赖它不需要的接口，使用多个专门的接口要优于使用单一的总接口。一个类对另一个类的依赖应该建立在最小的接口处，接口功能应该最小化，过于臃肿的接口应该拆分为多个接口。\n\n### 依赖倒置原则\n\n高层模块不应该依赖低层模块，二者都应该依赖其抽象（抽象类或接口）；抽象（抽象类或接口）不应该依赖细节（具体实现类）；细节（具体实现类）应依赖抽象。简单地说就是尽量面向接口编程。\n\n总结起来，就是每个类与别的类交互时，尽量只使用满足接口规范的抽象类。因为抽象类几乎没有实现细节，没有什么需要变化的。抽象的对象才是最具有表达能力的对象，可以随时填充相关的细节。\n\n### 迪米特原则\n\n一个对象应该对其他对象保持最少的了解，简单的理解就是高内聚、低耦合。一个类尽量减少对其他对象的依赖，并且这个类的方法和属性能用私有的就尽量私有化。对象之间的联系越简单越容易管理。\n\n就是要求对象只与必须交互的各类对象通信：当前对象本身；以参数形式传入到当前对象方法中的对象；当前对象的成员对象；如果当前对象的成员是一个集合，那么集合中的元素也都是可以交互的；当前对象所创建的对象。\n\n**总结一下，就是类要单纯，继承要谨慎，变化要封装，抽象类型要多用。**\n\n#### 提示 \n\n如果一味地遵守这些设计原则，将导致代码分层和类变多，项目变得非常庞大。所以对这些原则要根据实际情况做出取舍。一般分层不要过多，否则会导致代码变得难以维护和跟踪。\n\n传统的 JavaScript 程序使用函数和基于原型的继承来创建可重用的组件，但对于习惯使用面向对象编程方式的程序员来说就有些棘手了，因为面向对象编程用的是基于类的继承且对象是由类创建出来的。从ES6开始， JavaScript 程序员将能够使用基于类的面向对象的方式，但目前ES6还没有得到所有主流浏览器的支持。\n\n如果我们现在就想在 Web 应用上使用ES6的面向对象来编程，那么 TypeScript 是一个很好的选择。 TypeScript 允许开发者使用面向对象的特性来编写代码，并且编译后的 JavaScrip （可以配置编译目标版本为ES5）可以在所有主流浏览器和平台上运行。通过本章的学习可以让读者掌握面向对象的编程的基本概念，并掌握 TypeScript 语言中类、接口模块以及命名子间的基本用法。\n\n## 主要涉及的知识点\n\n●面向对象的基本概念：学会如何把数据有机地组合起来。\n\n●对象的创建。\n\n●类的基本概念和类的用法。\n\n●接口的概念以及用法。\n\n●命名空间以及其用法。\n\n●外部模块的概念和用法。\n\n●模块解析过程。\n\n●声明合并。\n\n","tags":["code"]}]